"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngSanitize","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngMap","ngGeolocation"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();
"use strict";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(role)!==-1)return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])});
!function(app){"use strict";app.registerModule("accountcharts")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("accounts")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("accounttypes")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("buys")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("companies")}(ApplicationConfiguration);
"use strict";ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]);
!function(app){"use strict";app.registerModule("sells")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("glmonths")}(ApplicationConfiguration);
!function(app){"use strict";app.registerModule("glyears")}(ApplicationConfiguration);
"use strict";ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]);
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Accountcharts",state:"accountcharts",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","accountcharts",{title:"List Accountcharts",state:"accountcharts.list"}),menuService.addSubMenuItem("topbar","accountcharts",{title:"Create Accountchart",state:"accountcharts.create",roles:["user"]})}angular.module("accountcharts").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("accountcharts",{"abstract":!0,url:"/accountcharts",template:"<ui-view/>"}).state("accountcharts.list",{url:"",templateUrl:"modules/accountcharts/client/views/list-accountcharts.client.view.html",controller:"AccountchartsListController",controllerAs:"vm",data:{pageTitle:"Accountcharts List"}}).state("accountcharts.create",{url:"/create",templateUrl:"modules/accountcharts/client/views/form-accountchart.client.view.html",controller:"AccountchartsController",controllerAs:"vm",resolve:{accountchartResolve:newAccountchart},data:{roles:["user","admin"],pageTitle:"Accountcharts Create"}}).state("accountcharts.edit",{url:"/:accountchartId/edit",templateUrl:"modules/accountcharts/client/views/form-accountchart.client.view.html",controller:"AccountchartsController",controllerAs:"vm",resolve:{accountchartResolve:getAccountchart},data:{roles:["user","admin"],pageTitle:"Edit Accountchart {{ accountchartResolve.name }}"}}).state("accountcharts.view",{url:"/:accountchartId",templateUrl:"modules/accountcharts/client/views/view-accountchart.client.view.html",controller:"AccountchartsController",controllerAs:"vm",resolve:{accountchartResolve:getAccountchart},data:{pageTitle:"Accountchart {{ accountchartResolve.name }}"}})}function getAccountchart($stateParams,AccountchartsService){return AccountchartsService.get({accountchartId:$stateParams.accountchartId}).$promise}function newAccountchart(AccountchartsService){return new AccountchartsService}angular.module("accountcharts").config(routeConfig),routeConfig.$inject=["$stateProvider"],getAccountchart.$inject=["$stateParams","AccountchartsService"],newAccountchart.$inject=["AccountchartsService"]}();
!function(){"use strict";function AccountchartsController($scope,$state,$window,Authentication,accountchart){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.accountchart.$remove($state.go("accountcharts.list"))}function save(isValid){function successCallback(res){$state.go("accountcharts.view",{accountchartId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.accountchart._id?vm.accountchart.$update(successCallback,errorCallback):vm.accountchart.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.accountchartForm"),!1)}var vm=this;vm.authentication=Authentication,vm.accountchart=accountchart,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("accountcharts").controller("AccountchartsController",AccountchartsController),AccountchartsController.$inject=["$scope","$state","$window","Authentication","accountchartResolve"]}();
!function(){"use strict";function AccountchartsListController(AccountchartsService){var vm=this;vm.accountcharts=AccountchartsService.query()}angular.module("accountcharts").controller("AccountchartsListController",AccountchartsListController),AccountchartsListController.$inject=["AccountchartsService"]}();
!function(){"use strict";function AccountchartsService($resource){return $resource("api/accountcharts/:accountchartId",{accountchartId:"@_id"},{update:{method:"PUT"}})}angular.module("accountcharts").factory("AccountchartsService",AccountchartsService),AccountchartsService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Accounts",state:"accounts",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","accounts",{title:"List Accounts",state:"accounts.list"}),menuService.addSubMenuItem("topbar","accounts",{title:"Create Account",state:"accounts.create",roles:["user"]})}angular.module("accounts").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("accounts",{"abstract":!0,url:"/accounts",template:"<ui-view/>"}).state("accounts.list",{url:"",templateUrl:"modules/accounts/client/views/list-accounts.client.view.html",controller:"AccountsListController",controllerAs:"vm",data:{pageTitle:"Accounts List"}}).state("accounts.create",{url:"/create",templateUrl:"modules/accounts/client/views/form-account.client.view.html",controller:"AccountsController",controllerAs:"vm",resolve:{accountResolve:newAccount},data:{roles:["user","admin"],pageTitle:"Accounts Create"}}).state("accounts.edit",{url:"/:accountId/edit",templateUrl:"modules/accounts/client/views/form-account.client.view.html",controller:"AccountsController",controllerAs:"vm",resolve:{accountResolve:getAccount},data:{roles:["user","admin"],pageTitle:"Edit Account {{ accountResolve.name }}"}}).state("accounts.view",{url:"/:accountId",templateUrl:"modules/accounts/client/views/view-account.client.view.html",controller:"AccountsController",controllerAs:"vm",resolve:{accountResolve:getAccount},data:{pageTitle:"Account {{ accountResolve.name }}"}})}function getAccount($stateParams,AccountsService){return AccountsService.get({accountId:$stateParams.accountId}).$promise}function newAccount(AccountsService){return new AccountsService}angular.module("accounts").config(routeConfig),routeConfig.$inject=["$stateProvider"],getAccount.$inject=["$stateParams","AccountsService"],newAccount.$inject=["AccountsService"]}();
!function(){"use strict";function AccountsController($scope,$state,$window,Authentication,account){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.account.$remove($state.go("accounts.list"))}function save(isValid){function successCallback(res){$state.go("accounts.view",{accountId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.account._id?vm.account.$update(successCallback,errorCallback):vm.account.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.accountForm"),!1)}var vm=this;vm.authentication=Authentication,vm.account=account,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("accounts").controller("AccountsController",AccountsController),AccountsController.$inject=["$scope","$state","$window","Authentication","accountResolve"]}();
!function(){"use strict";function AccountsListController(AccountsService){var vm=this;vm.accounts=AccountsService.query()}angular.module("accounts").controller("AccountsListController",AccountsListController),AccountsListController.$inject=["AccountsService"]}();
!function(){"use strict";function AccountsService($resource){return $resource("api/accounts/:accountId",{accountId:"@_id"},{update:{method:"PUT"}})}angular.module("accounts").factory("AccountsService",AccountsService),AccountsService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Accounttypes",state:"accounttypes",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","accounttypes",{title:"List Accounttypes",state:"accounttypes.list"}),menuService.addSubMenuItem("topbar","accounttypes",{title:"Create Accounttype",state:"accounttypes.create",roles:["user"]})}angular.module("accounttypes").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("accounttypes",{"abstract":!0,url:"/accounttypes",template:"<ui-view/>"}).state("accounttypes.list",{url:"",templateUrl:"modules/accounttypes/client/views/list-accounttypes.client.view.html",controller:"AccounttypesListController",controllerAs:"vm",data:{pageTitle:"Accounttypes List"}}).state("accounttypes.create",{url:"/create",templateUrl:"modules/accounttypes/client/views/form-accounttype.client.view.html",controller:"AccounttypesController",controllerAs:"vm",resolve:{accounttypeResolve:newAccounttype},data:{roles:["user","admin"],pageTitle:"Accounttypes Create"}}).state("accounttypes.edit",{url:"/:accounttypeId/edit",templateUrl:"modules/accounttypes/client/views/form-accounttype.client.view.html",controller:"AccounttypesController",controllerAs:"vm",resolve:{accounttypeResolve:getAccounttype},data:{roles:["user","admin"],pageTitle:"Edit Accounttype {{ accounttypeResolve.name }}"}}).state("accounttypes.view",{url:"/:accounttypeId",templateUrl:"modules/accounttypes/client/views/view-accounttype.client.view.html",controller:"AccounttypesController",controllerAs:"vm",resolve:{accounttypeResolve:getAccounttype},data:{pageTitle:"Accounttype {{ accounttypeResolve.name }}"}})}function getAccounttype($stateParams,AccounttypesService){return AccounttypesService.get({accounttypeId:$stateParams.accounttypeId}).$promise}function newAccounttype(AccounttypesService){return new AccounttypesService}angular.module("accounttypes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getAccounttype.$inject=["$stateParams","AccounttypesService"],newAccounttype.$inject=["AccounttypesService"]}();
!function(){"use strict";function AccounttypesController($scope,$state,$window,Authentication,accounttype){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.accounttype.$remove($state.go("accounttypes.list"))}function save(isValid){function successCallback(res){$state.go("accounttypes.view",{accounttypeId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.accounttype._id?vm.accounttype.$update(successCallback,errorCallback):vm.accounttype.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.accounttypeForm"),!1)}var vm=this;vm.authentication=Authentication,vm.accounttype=accounttype,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("accounttypes").controller("AccounttypesController",AccounttypesController),AccounttypesController.$inject=["$scope","$state","$window","Authentication","accounttypeResolve"]}();
!function(){"use strict";function AccounttypesListController(AccounttypesService){var vm=this;vm.accounttypes=AccounttypesService.query()}angular.module("accounttypes").controller("AccounttypesListController",AccounttypesListController),AccounttypesListController.$inject=["AccounttypesService"]}();
!function(){"use strict";function AccounttypesService($resource){return $resource("api/accounttypes/:accounttypeId",{accounttypeId:"@_id"},{update:{method:"PUT"}})}angular.module("accounttypes").factory("AccounttypesService",AccounttypesService),AccounttypesService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Buys",state:"buys",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","buys",{title:"List Buys",state:"buys.list"}),menuService.addSubMenuItem("topbar","buys",{title:"Create Buy",state:"buys.create",roles:["user"]})}angular.module("buys").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("buys",{"abstract":!0,url:"/buys",template:"<ui-view/>"}).state("buys.list",{url:"",templateUrl:"modules/buys/client/views/list-buys.client.view.html",controller:"BuysListController",controllerAs:"vm",data:{pageTitle:"Buys List"}}).state("buys.create",{url:"/create",templateUrl:"modules/buys/client/views/form-buy.client.view.html",controller:"BuysController",controllerAs:"vm",resolve:{buyResolve:newBuy},data:{roles:["user","admin"],pageTitle:"Buys Create"}}).state("buys.edit",{url:"/:buyId/edit",templateUrl:"modules/buys/client/views/form-buy.client.view.html",controller:"BuysController",controllerAs:"vm",resolve:{buyResolve:getBuy},data:{roles:["user","admin"],pageTitle:"Edit Buy {{ buyResolve.name }}"}}).state("buys.view",{url:"/:buyId",templateUrl:"modules/buys/client/views/view-buy.client.view.html",controller:"BuysController",controllerAs:"vm",resolve:{buyResolve:getBuy},data:{pageTitle:"Buy {{ buyResolve.name }}"}})}function getBuy($stateParams,BuysService){return BuysService.get({buyId:$stateParams.buyId}).$promise}function newBuy(BuysService){return new BuysService}angular.module("buys").config(routeConfig),routeConfig.$inject=["$stateProvider"],getBuy.$inject=["$stateParams","BuysService"],newBuy.$inject=["BuysService"]}();
!function(){"use strict";function BuysController($scope,$state,$window,Authentication,buy){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.buy.$remove($state.go("buys.list"))}function save(isValid){function successCallback(res){$state.go("buys.view",{buyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.buy._id?vm.buy.$update(successCallback,errorCallback):vm.buy.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.buyForm"),!1)}var vm=this;vm.authentication=Authentication,vm.buy=buy,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("buys").controller("BuysController",BuysController),BuysController.$inject=["$scope","$state","$window","Authentication","buyResolve"]}();
!function(){"use strict";function BuysListController(BuysService){var vm=this;vm.buys=BuysService.query()}angular.module("buys").controller("BuysListController",BuysListController),BuysListController.$inject=["BuysService"]}();
!function(){"use strict";function BuysService($resource){return $resource("api/buys/:buyId",{buyId:"@_id"},{update:{method:"PUT"}})}angular.module("buys").factory("BuysService",BuysService),BuysService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Companies",state:"companies",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","companies",{title:"List Companies",state:"companies.list"}),menuService.addSubMenuItem("topbar","companies",{title:"Create Company",state:"companies.create",roles:["user"]})}angular.module("companies").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("companies",{"abstract":!0,url:"/companies",template:"<ui-view/>"}).state("companies.list",{url:"",templateUrl:"modules/companies/client/views/list-companies.client.view.html",controller:"CompaniesListController",controllerAs:"vm",data:{pageTitle:"Companies List"}}).state("companies.create",{url:"/create",templateUrl:"modules/companies/client/views/form-company.client.view.html",controller:"CompaniesController",controllerAs:"vm",resolve:{companyResolve:newCompany},data:{roles:["user","admin"],pageTitle:"Companies Create"}}).state("companies.edit",{url:"/:companyId/edit",templateUrl:"modules/companies/client/views/form-company.client.view.html",controller:"CompaniesController",controllerAs:"vm",resolve:{companyResolve:getCompany},data:{roles:["user","admin"],pageTitle:"Edit Company {{ companyResolve.name }}"}}).state("companies.view",{url:"/:companyId",templateUrl:"modules/companies/client/views/view-company.client.view.html",controller:"CompaniesController",controllerAs:"vm",resolve:{companyResolve:getCompany},data:{pageTitle:"Company {{ companyResolve.name }}"}})}function getCompany($stateParams,CompaniesService){return CompaniesService.get({companyId:$stateParams.companyId}).$promise}function newCompany(CompaniesService){return new CompaniesService}angular.module("companies").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCompany.$inject=["$stateParams","CompaniesService"],newCompany.$inject=["CompaniesService"]}();
!function(){"use strict";function CompaniesController($scope,$state,$window,Authentication,company){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.company.$remove($state.go("companies.list"))}function save(isValid){function successCallback(res){$state.go("companies.view",{companyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.company._id?vm.company.$update(successCallback,errorCallback):vm.company.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.companyForm"),!1)}var vm=this;vm.authentication=Authentication,vm.company=company,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("companies").controller("CompaniesController",CompaniesController),CompaniesController.$inject=["$scope","$state","$window","Authentication","companyResolve"]}();
!function(){"use strict";function CompaniesListController(CompaniesService){var vm=this;vm.companies=CompaniesService.query()}angular.module("companies").controller("CompaniesListController",CompaniesListController),CompaniesListController.$inject=["CompaniesService"]}();
!function(){"use strict";function CompaniesService($resource){return $resource("api/companies/:companyId",{companyId:"@_id"},{update:{method:"PUT"}})}angular.module("companies").factory("CompaniesService",CompaniesService),CompaniesService.$inject=["$resource"]}();
"use strict";angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]);
"use strict";angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]);
"use strict";angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]);
"use strict";angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]);
"use strict";angular.module("core").controller("HomeController",["$scope","Authentication","$state","$window",function($scope,Authentication,$state,$window){$scope.authentication=Authentication,$scope.authentication.user?$state.go("home"):$state.go("authentication.signin")}]);
"use strict";angular.module("core").directive("sideNavigation",["$timeout",function($timeout){return{restrict:"A",link:function(scope,element){scope.$watch("authentication.user",function(){$timeout(function(){element.metisMenu()})})}}}]).directive("minimalizaSidebar",["$timeout",function($timeout){return{restrict:"A",template:'<a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="" ng-click="minimalize()"><i class="fa fa-bars"></i></a>',controller:["$scope","$element",function($scope,$element){$scope.minimalize=function(){angular.element("body").toggleClass("mini-navbar"),!angular.element("body").hasClass("mini-navbar")||angular.element("body").hasClass("body-small")?(angular.element("#side-menu").hide(),$timeout(function(){angular.element("#side-menu").fadeIn(400)},200)):angular.element("#side-menu").removeAttr("style")}}]}}]).directive("typeahead",["$compile","$timeout",function($compile,$timeout){return{restrict:"A",transclude:!0,scope:{ngModel:"=",typeahead:"=",typeaheadCallback:"="},link:function(scope,elem,attrs){var template='<div class="dropdown"><ul class="dropdown-menu" ng-if="ngModel.length > 1" style="display:block; float: left; height: auto; max-height: 200px;    width: auto; overflow-y: scroll;" ng-hide="!ngModel.length || !filitered.length || selected"><li ng-repeat="item in filitered = (filitered | filter:{postcode:ngModel}) track by $index" ng-click="click(item)" style="cursor:pointer" ng-class="{active:$index==active}" ng-mouseenter="mouseenter($index)"><a>{{item.subdistrict}} {{item.district}} {{item.province}} {{item.postcode}}</a></li></ul></div>',filterCustom=[];elem.bind("blur",function(){$timeout(function(){scope.selected=!0},100)}),elem.bind("keydown",function($event){38===$event.keyCode&&scope.active>0?(scope.active--,scope.$digest()):scope.filitered&&40===$event.keyCode&&scope.active<scope.filitered.length-1?(scope.active++,scope.$digest()):13===$event.keyCode&&(filterCustom=[],0===scope.active&&(scope.typeahead.forEach(function(e){e.postcode===scope.ngModel&&filterCustom.push(e)}),scope.filitered=filterCustom),scope.$apply(function(){scope.click(scope.filitered[scope.active])}))}),scope.click=function(item){scope.ngModel=item.postcode,scope.selected=item,scope.typeaheadCallback&&scope.typeaheadCallback(item),elem[0].blur()},scope.mouseenter=function($index){scope.active=$index},scope.$watch("ngModel",function(input){scope.selected&&scope.selected.postcode===input||(scope.active=0,scope.selected=!1,scope.filitered&&input&&1===scope.filitered.length&&scope.filitered[0].name===input&&scope.click(scope.filitered[0]),scope.ngModel&&scope.ngModel.length>1&&(filterCustom=[],0===scope.active&&(scope.typeahead.forEach(function(e){e.postcode.substr(0,scope.ngModel.length)===scope.ngModel&&filterCustom.push(e)}),scope.filitered=filterCustom),scope.typeaheadCallback&&5===scope.ngModel.length&&scope.typeaheadCallback(scope.filitered[0])))}),elem.after($compile(template)(scope))}}}]).directive("typeaheadLanguage",["$compile","$timeout",function($compile,$timeout){return{restrict:"A",transclude:!0,scope:{ngModel:"=",typeaheadLanguage:"=",typeaheadCallback:"="},link:function(scope,elem,attrs){var template='<div class="dropdown"><ul class="dropdown-menu" style="display:block; float: left; height: auto; max-height: 200px;    width: auto; overflow-y: scroll;" ng-hide="!ngModel.length || !filitered.length || selected"><li ng-repeat="item in filitered = (filitered | filter:ngModel) track by $index" ng-click="click(item)" style="cursor:pointer" ng-class="{active:$index==active}" ng-mouseenter="mouseenter($index)"><a>{{item.th}}, {{item.en.official}}</a></li></ul></div>',filterCustom=[];elem.bind("blur",function(){$timeout(function(){scope.selected=!0},100)}),elem.bind("keydown",function($event){38===$event.keyCode&&scope.active>0?(scope.active--,scope.$digest()):scope.filitered&&40===$event.keyCode&&scope.active<scope.filitered.length-1?(scope.active++,scope.$digest()):13===$event.keyCode&&(filterCustom=[],0===scope.active&&(scope.typeaheadLanguage.forEach(function(e){e.postcode===scope.ngModel&&filterCustom.push(e)}),scope.filitered=filterCustom),scope.$apply(function(){scope.click(scope.filitered[scope.active])}))}),scope.click=function(item){scope.ngModel=item.th,scope.selected=item,scope.typeaheadCallback&&scope.typeaheadCallback(item),elem[0].blur()},scope.mouseenter=function($index){scope.active=$index},scope.$watch("ngModel",function(input){scope.selected&&scope.selected.postcode===input||(scope.active=0,scope.selected=!1,scope.filitered&&input&&1===scope.filitered.length&&scope.filitered[0].name===input&&scope.click(scope.filitered[0]),scope.ngModel&&(filterCustom=[],0===scope.active&&(scope.filitered=scope.typeaheadLanguage),scope.typeaheadCallback&&5===scope.ngModel.length&&scope.typeaheadCallback(scope.filitered[0])))}),elem.after($compile(template)(scope))}}}]);
"use strict";angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]);
"use strict";angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]);
"use strict";angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]);
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Sells",state:"sells",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","sells",{title:"List Sells",state:"sells.list"}),menuService.addSubMenuItem("topbar","sells",{title:"Create Sell",state:"sells.create",roles:["user"]})}angular.module("sells").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("sells",{"abstract":!0,url:"/sells",template:"<ui-view/>"}).state("sells.list",{url:"",templateUrl:"modules/sells/client/views/list-sells.client.view.html",controller:"SellsListController",controllerAs:"vm",data:{pageTitle:"Sells List"}}).state("sells.create",{url:"/create",templateUrl:"modules/sells/client/views/form-sell.client.view.html",controller:"SellsController",controllerAs:"vm",resolve:{sellResolve:newSell},data:{roles:["user","admin"],pageTitle:"Sells Create"}}).state("sells.edit",{url:"/:sellId/edit",templateUrl:"modules/sells/client/views/form-sell.client.view.html",controller:"SellsController",controllerAs:"vm",resolve:{sellResolve:getSell},data:{roles:["user","admin"],pageTitle:"Edit Sell {{ sellResolve.name }}"}}).state("sells.view",{url:"/:sellId",templateUrl:"modules/sells/client/views/view-sell.client.view.html",controller:"SellsController",controllerAs:"vm",resolve:{sellResolve:getSell},data:{pageTitle:"Sell {{ sellResolve.name }}"}})}function getSell($stateParams,SellsService){return SellsService.get({sellId:$stateParams.sellId}).$promise}function newSell(SellsService){return new SellsService}angular.module("sells").config(routeConfig),routeConfig.$inject=["$stateProvider"],getSell.$inject=["$stateParams","SellsService"],newSell.$inject=["SellsService"]}();
!function(){"use strict";function SellsListController(SellsService){var vm=this;vm.sells=SellsService.query()}angular.module("sells").controller("SellsListController",SellsListController),SellsListController.$inject=["SellsService"]}();
!function(){"use strict";function SellsController($scope,$state,$window,Authentication,sell){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.sell.$remove($state.go("sells.list"))}function save(isValid){function successCallback(res){$state.go("sells.view",{sellId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.sell._id?vm.sell.$update(successCallback,errorCallback):vm.sell.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.sellForm"),!1)}var vm=this;vm.authentication=Authentication,vm.sell=sell,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("sells").controller("SellsController",SellsController),SellsController.$inject=["$scope","$state","$window","Authentication","sellResolve"]}();
!function(){"use strict";function SellsService($resource){return $resource("api/sells/:sellId",{sellId:"@_id"},{update:{method:"PUT"}})}angular.module("sells").factory("SellsService",SellsService),SellsService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Glmonths",state:"glmonths",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","glmonths",{title:"List Glmonths",state:"glmonths.list"}),menuService.addSubMenuItem("topbar","glmonths",{title:"Create Glmonth",state:"glmonths.create",roles:["user"]})}angular.module("glmonths").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("glmonths",{"abstract":!0,url:"/glmonths",template:"<ui-view/>"}).state("glmonths.list",{url:"",templateUrl:"modules/glmonths/client/views/list-glmonths.client.view.html",controller:"GlmonthsListController",controllerAs:"vm",data:{pageTitle:"Glmonths List"}}).state("glmonths.create",{url:"/create",templateUrl:"modules/glmonths/client/views/form-glmonth.client.view.html",controller:"GlmonthsController",controllerAs:"vm",resolve:{glmonthResolve:newGlmonth},data:{roles:["user","admin"],pageTitle:"Glmonths Create"}}).state("glmonths.edit",{url:"/:glmonthId/edit",templateUrl:"modules/glmonths/client/views/form-glmonth.client.view.html",controller:"GlmonthsController",controllerAs:"vm",resolve:{glmonthResolve:getGlmonth},data:{roles:["user","admin"],pageTitle:"Edit Glmonth {{ glmonthResolve.name }}"}}).state("glmonths.view",{url:"/:glmonthId",templateUrl:"modules/glmonths/client/views/view-glmonth.client.view.html",controller:"GlmonthsController",controllerAs:"vm",resolve:{glmonthResolve:getGlmonth},data:{pageTitle:"Glmonth {{ glmonthResolve.name }}"}})}function getGlmonth($stateParams,GlmonthsService){return GlmonthsService.get({glmonthId:$stateParams.glmonthId}).$promise}function newGlmonth(GlmonthsService){return new GlmonthsService}angular.module("glmonths").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGlmonth.$inject=["$stateParams","GlmonthsService"],newGlmonth.$inject=["GlmonthsService"]}();
!function(){"use strict";function GlmonthsController($scope,$state,$window,Authentication,glmonth){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.glmonth.$remove($state.go("glmonths.list"))}function save(isValid){function successCallback(res){$state.go("glmonths.view",{glmonthId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.glmonth._id?vm.glmonth.$update(successCallback,errorCallback):vm.glmonth.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.glmonthForm"),!1)}var vm=this;vm.authentication=Authentication,vm.glmonth=glmonth,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("glmonths").controller("GlmonthsController",GlmonthsController),GlmonthsController.$inject=["$scope","$state","$window","Authentication","glmonthResolve"]}();
!function(){"use strict";function GlmonthsListController(GlmonthsService){var vm=this;vm.glmonths=GlmonthsService.query()}angular.module("glmonths").controller("GlmonthsListController",GlmonthsListController),GlmonthsListController.$inject=["GlmonthsService"]}();
!function(){"use strict";function GlmonthsService($resource){return $resource("api/glmonths/:glmonthId",{glmonthId:"@_id"},{update:{method:"PUT"}})}angular.module("glmonths").factory("GlmonthsService",GlmonthsService),GlmonthsService.$inject=["$resource"]}();
!function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Glyears",state:"glyears",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","glyears",{title:"List Glyears",state:"glyears.list"}),menuService.addSubMenuItem("topbar","glyears",{title:"Create Glyear",state:"glyears.create",roles:["user"]})}angular.module("glyears").run(menuConfig),menuConfig.$inject=["menuService"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("glyears",{"abstract":!0,url:"/glyears",template:"<ui-view/>"}).state("glyears.list",{url:"",templateUrl:"modules/glyears/client/views/list-glyears.client.view.html",controller:"GlyearsListController",controllerAs:"vm",data:{pageTitle:"Glyears List"}}).state("glyears.create",{url:"/create",templateUrl:"modules/glyears/client/views/form-glyear.client.view.html",controller:"GlyearsController",controllerAs:"vm",resolve:{glyearResolve:newGlyear},data:{roles:["user","admin"],pageTitle:"Glyears Create"}}).state("glyears.edit",{url:"/:glyearId/edit",templateUrl:"modules/glyears/client/views/form-glyear.client.view.html",controller:"GlyearsController",controllerAs:"vm",resolve:{glyearResolve:getGlyear},data:{roles:["user","admin"],pageTitle:"Edit Glyear {{ glyearResolve.name }}"}}).state("glyears.view",{url:"/:glyearId",templateUrl:"modules/glyears/client/views/view-glyear.client.view.html",controller:"GlyearsController",controllerAs:"vm",resolve:{glyearResolve:getGlyear},data:{pageTitle:"Glyear {{ glyearResolve.name }}"}})}function getGlyear($stateParams,GlyearsService){return GlyearsService.get({glyearId:$stateParams.glyearId}).$promise}function newGlyear(GlyearsService){return new GlyearsService}angular.module("glyears").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGlyear.$inject=["$stateParams","GlyearsService"],newGlyear.$inject=["GlyearsService"]}();
!function(){"use strict";function GlyearsController($scope,$state,$window,Authentication,glyear){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.glyear.$remove($state.go("glyears.list"))}function save(isValid){function successCallback(res){$state.go("glyears.view",{glyearId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.glyear._id?vm.glyear.$update(successCallback,errorCallback):vm.glyear.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.glyearForm"),!1)}var vm=this;vm.authentication=Authentication,vm.glyear=glyear,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("glyears").controller("GlyearsController",GlyearsController),GlyearsController.$inject=["$scope","$state","$window","Authentication","glyearResolve"]}();
!function(){"use strict";function GlyearsListController(GlyearsService){var vm=this;vm.glyears=GlyearsService.query()}angular.module("glyears").controller("GlyearsListController",GlyearsListController),GlyearsListController.$inject=["GlyearsService"]}();
!function(){"use strict";function GlyearsService($resource){return $resource("api/glyears/:glyearId",{glyearId:"@_id"},{update:{method:"PUT"}})}angular.module("glyears").factory("GlyearsService",GlyearsService),GlyearsService.$inject=["$resource"]}();
"use strict";angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]);
"use strict";angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]);
"use strict";angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]);
"use strict";angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]);
"use strict";angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),toastr.options={closeButton:!1,debug:!1,newestOnTop:!1,progressBar:!1,positionClass:"toast-top-right",preventDuplicates:!1,onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"},$scope.signup=function(isValid){return $scope.startCall=!0,$scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.startCall=!1,$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.startCall=!1,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),$scope.startCall=!1,!1)},$scope.signin=function(isValid){return $scope.startCall=!0,$scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.startCall=!1,$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.startCall=!1,$scope.error=response.message,$scope.error.indexOf("Invalid")!==-1?$scope.newError="ชื่อผู้ใช้หรือรหัสผ่านผิด":$scope.newError=$scope.error}):($scope.$broadcast("show-errors-check-validity","userForm"),$scope.startCall=!1,!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]);
"use strict";angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]);
"use strict";angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]);
"use strict";angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}}}]);
"use strict";angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}});
"use strict";angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]);
"use strict";angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]);
"use strict";angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);
"use strict";angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]);
"use strict";angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){$scope.searchTeb="user",Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]);
"use strict";angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]);
"use strict";angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]);
"use strict";angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]);
"use strict";angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]);
"use strict";angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]);
"use strict";angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]);